-- Migration: enable multiple subscriptions per email
-- Safe to run multiple times; guards and IF EXISTS used where possible.

begin;

-- 0) Ensure columns required by new schema exist on user_stripe
alter table if exists public.user_stripe
  add column if not exists stripe_subscription_id text;

-- 1) user_stripe: add surrogate id PK (bigint identity), drop user_id PK/unique constraints
alter table if exists public.user_stripe
  add column if not exists id bigint generated by default as identity;

-- Backfill id for existing rows that might be null
do $$
begin
  if exists (
    select 1 from information_schema.columns
    where table_schema = 'public' and table_name = 'user_stripe' and column_name = 'id'
  ) then
    update public.user_stripe
      set id = coalesce(id, nextval(pg_get_serial_sequence('public.user_stripe','id')))
    where id is null;
  end if;
end $$;

-- Drop old primary key on user_id if present, then set new PK on id
alter table if exists public.user_stripe drop constraint if exists user_stripe_pkey;
alter table if exists public.user_stripe drop constraint if exists user_stripe_user_id_key;
alter table if exists public.user_stripe
  add constraint user_stripe_pkey primary key (id);

-- Remove uniqueness on email (allow duplicates)
alter table if exists public.user_stripe drop constraint if exists user_stripe_email_key;

-- Make stripe_customer_id non-unique (we keep plain index)
alter table if exists public.user_stripe drop constraint if exists user_stripe_stripe_customer_id_key;

-- Indexes for new access patterns
create index if not exists idx_user_stripe_email on public.user_stripe (email);
create index if not exists idx_user_stripe_customer on public.user_stripe (stripe_customer_id);
create index if not exists idx_user_stripe_customer_subscription on public.user_stripe (stripe_customer_id, stripe_subscription_id);
create unique index if not exists uq_user_stripe_subscription_id on public.user_stripe (stripe_subscription_id) where stripe_subscription_id is not null;

-- 2) recipient_emails: add relation to user_stripe and migrate data
alter table if exists public.recipient_emails
  add column if not exists user_stripe_id bigint;

-- Try to backfill via subscription_id first, then by customer_id
update public.recipient_emails re
set user_stripe_id = us.id
from public.user_stripe us
where re.user_stripe_id is null
  and re.stripe_subscription_id is not null
  and us.stripe_subscription_id = re.stripe_subscription_id;

update public.recipient_emails re
set user_stripe_id = coalesce(re.user_stripe_id, us.id)
from public.user_stripe us
where re.user_stripe_id is null
  and re.stripe_customer_id is not null
  and us.stripe_customer_id = re.stripe_customer_id;

-- Add FK and indexes
do $$ begin
  alter table public.recipient_emails
    add constraint recipient_emails_user_stripe_fkey foreign key (user_stripe_id)
    references public.user_stripe(id) on delete cascade;
exception when duplicate_object then null; end $$;

create index if not exists idx_recipient_emails_user_stripe on public.recipient_emails (user_stripe_id);
create index if not exists idx_recipient_emails_email on public.recipient_emails (email);

-- Enforce global uniqueness on email (unchanged spec)
alter table if exists public.recipient_emails drop constraint if exists recipient_unique_per_user;
do $$ begin
  alter table public.recipient_emails
    add constraint recipient_unique_email unique (email);
exception when duplicate_object then null; end $$;

-- Drop obsolete columns
alter table if exists public.recipient_emails
  drop column if exists stripe_customer_id,
  drop column if exists stripe_subscription_id;

commit;

